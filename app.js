// Generated by CoffeeScript 1.7.1
var config, db;

require('./lib/Yt-download.coffee');

window.App = Em.Application.create();

App.Router.map(function() {
  this.route('queue');
  this.route('about');
  return this.route('preferences');
});

App.IndexRoute = Em.Route.extend({
  actions: {
    parse: function() {
      return alert(this.get('controller.link'));
    }
  }
});

App.ConfigKey = Em.Object.extend({
  Name: '',
  DefaultValue: '',
  Value: ''
});

App.Config = Em.Object.extend({
  keys: [
    App.ConfigKey.create({
      Name: 'downloadPath',
      DefaultValue: ''
    }), App.ConfigKey.create({
      Name: 'language',
      DefaultValue: 'en'
    }), App.ConfigKey.create({
      Name: 'platform',
      DefaultValue: 'windows'
    })
  ],
  columns: [new Column('Id', 'INTEGER', false, true, true), new Column('Key', 'TEXT', true, false, false, true), new Column('Value', 'TEXT')],
  getCreateTableSQL: function() {
    var column, columns, columnsSQL, i, len, _i, _len;
    columns = this.get('columns');
    len = columns.length;
    columnsSQL = '';
    for (i = _i = 0, _len = columns.length; _i < _len; i = ++_i) {
      column = columns[i];
      columnsSQL += len - 1 === i ? column.getSQL() : column.getSQL() + ', ';
    }
    return 'CREATE TABLE IF NOT EXISTS `config` (' + columnsSQL + ')';
  },
  insert: function(database, createTable) {
    var colNames, column, columns, i, keys, len, _i, _len;
    columns = this.get('columns');
    colNames = '';
    len = columns.length;
    for (i = _i = 0, _len = columns.length; _i < _len; i = ++_i) {
      column = columns[i];
      if (column.Name !== 'Id') {
        colNames += len - 1 === i ? '`' + column.Name + '`' : '`' + column.Name + '`, ';
      }
    }
    keys = this.get('keys');
    return database.transaction((function(_this) {
      return function(tx) {
        var key, value, _j, _len1, _results;
        if (createTable) {
          tx.executeSql(_this.getCreateTableSQL());
        }
        _results = [];
        for (_j = 0, _len1 = keys.length; _j < _len1; _j++) {
          key = keys[_j];
          value = !!key.get('Value') ? key.get('Value') : key.get('DefaultValue');
          _results.push(tx.executeSql('INSERT INTO `config` (' + colNames + ') VALUES ("' + key.get('Name') + '", "' + value + '")'));
        }
        return _results;
      };
    })(this));
  },
  setValue: function(key, value, db) {
    db.transaction(function(tx) {
      return tx.executeSql('UPDATE `config` SET `Value` = "' + value + '" WHERE `Key` = "' + key + '"');
    });
    return this.get('keys').filterBy('Name', key)[0].set('Value', value);
  },
  getLatestData: function(db) {
    var that;
    that = this;
    return db.transaction((function(_this) {
      return function(tx) {
        return tx.executeSql('SELECT * FROM `config`', [], function(tx, result) {
          var i, row, _i, _len, _ref, _results;
          _ref = result.rows;
          _results = [];
          for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
            row = _ref[i];
            _results.push(that.get('keys')[i].set('Value', result.rows.item(i).Value));
          }
          return _results;
        });
      };
    })(this));
  },
  resetConfig: function(db) {
    return db.transaction(function(tx) {
      tx.executeSql('DROP TABLE `config`');
      return location.reload();
    });
  }
});

db = openDatabase('app-db', '1.0', 'Cross platform YouTube downloader database.', 2 * 1024 * 1024);

config = App.Config.create();

config.insert(db, true);

config.setValue('platform', os.platform(), db);

App.PreferencesController = Em.Controller.extend({
  model: config,
  directory: (function() {
    var downloadPath;
    downloadPath = this.get('model.keys').filterBy('Name', 'downloadPath').get('firstObject').get('Value');
    if (!!downloadPath) {
      this.get('model').setValue('downloadPath', downloadPath, db);
    }
    this.get('model').getLatestData(db);
    return downloadPath;
  }).property('model.keys.@each.Value')
});

Em.TextField.reopen({
  attributeBindings: ['nwdirectory']
});

App.DirectoryChooser = Em.TextField.extend({
  type: 'file',
  classNames: ['directory-chooser'],
  change: function(evt) {
    return config.get('keys').filterBy('Name', 'downloadPath')[0].set('Value', evt.target.value);
  }
});

App.ChooseDirectoryButton = Em.View.extend({
  tagName: 'span',
  classNames: ['btn', 'btn-blue'],
  template: Em.Handlebars.compile('Choose download directory'),
  click: function() {
    return $('.directory-chooser').click();
  }
});

App.PreferencesView = Em.View.extend({
  controller: App.PreferencesController.create({
    model: config
  })
});

App.DropTable = Em.View.extend({
  modalActive: false,
  tagName: 'button',
  classNames: ['btn', 'btn-red'],
  attributeBindings: ['disabled'],
  disabled: false,
  click: function() {
    this.set('disabled', 'disabled');
    return this.set('modalActive', true);
  },
  Modal: (function() {
    var html;
    html = '<div title="Confirm action"><p>Are you sure you want to reset preferences?</p></div>';
    return $(html).dialog({
      height: 200,
      modal: true,
      buttons: {
        Yes: function() {
          config.resetConfig(db);
          return $(this).dialog('close');
        },
        No: function() {
          return $(this).dialog('close');
        }
      }
    });
  }).property('modalActive')
});
